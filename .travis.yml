# Recipe for build and integration testing on Travis-CI

dist: bionic
language: cpp

# If we set 'ccache: true', Travis installs replacement ccache wrappers of system compilers, which we don't want,
# so we'll do our own ccache management.
# Note the heuristics for whether cache is shared or distinct:
# https://docs.travis-ci.com/user/caching/#Caches-and-build-matrices
cache:
  pip: true
  directories:
    # Note: if a cache store forks due to a stage with parallel jobs that Travis identifies as part of the same flow,
    # we must make sure that the parallel jobs do not write to any of the same caches. Also note that all stages use the
    # same cache, so early stage jobs may see caches from later stages from previous builds in the same branch.
    - $HOME/.ccache_gmxapi
    - $HOME/.ccache_gromacs
    - $HOME/.ccache_py
# Allows us to build and install GROMACS in one CI stage, then use the installation in a subsequent stage
#    - $HOME/install

compiler: gcc

env:
  - PY=3.6 GROMACS=release-2019
  - PY=3.7 GROMACS=release-2020 GMXAPI="gmxapi<0.2"
#  - PY=3.7 GROMACS=release-2021 GMXAPI="gmxapi>=0.2"
#  - PY=3.7 GROMACS=master GMXAPI="gmxapi>=0.2"

addons:
  apt:
    packages:
    - doxygen
    - libblas-dev
    - libcr-dev
    - libfftw3-dev
    - liblapack-dev
    - libmpich-dev
    - libxml2-dev
    - mpich

# Set up for all jobs
before_install:
  - pyenv versions
  # get exactly one Python version: the last listed patch version for the selected minor version
  - pyenv whence python${PY} && export PY_VER=`pyenv whence python${PY} | tail -1`
  - pyenv shell $PY_VER && pyenv shell
#  - python-config --includes
  - pyenv prefix ${PY_VER} && export PYTHON_PREFIX=`pyenv prefix ${PY_VER}`
  - pyenv which python && export PYTHON=`pyenv which python`
  - source ./ci_scripts/set_compilers
  # Ref https://riptutorial.com/cmake/example/4723/configure-travis-ci-with-newest-cmake
  # first we create a directory for the CMake binaries
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir ${DEPS_DIR} && cd ${DEPS_DIR}
  # we use wget to fetch the cmake binaries
  - travis_retry wget --no-check-certificate https://github.com/Kitware/CMake/releases/download/v3.17.1/cmake-3.17.1-Linux-x86_64.tar.gz
  # this is optional, but useful:
  # do a quick checksum to ensure that the archive we downloaded did not get compromised
  - echo "23dd30da0bacf0e644d82298907b8e03edbc59c4ed40839afdeeb3b86e66bc93  cmake-3.17.1-Linux-x86_64.tar.gz" > cmake_sha256.txt
  - sha256sum -c cmake_sha256.txt
  # extract the binaries; the output here is quite lengthy,
  # so we swallow it to not clutter up the travis console
  - tar -xvf cmake-3.17.1-Linux-x86_64.tar.gz > /dev/null
  - mv cmake-3.17.1-Linux-x86_64 cmake-install
  # add both the top-level directory and the bin directory from the archive
  # to the system PATH. By adding it to the front of the path we hide the
  # preinstalled CMake with our own.
  - PATH=${DEPS_DIR}/cmake-install:${DEPS_DIR}/cmake-install/bin:$PATH
  # don't forget to switch back to the main build directory once you are done
  - cd ${TRAVIS_BUILD_DIR}


install:
  - export CCACHE_DIR=$HOME/.ccache_gromacs
  - ccache -s
  - |
    if [ "${GROMACS}" == release-2019 ] ; then
      ./ci_scripts/install_gromacs_2019.sh
    else
      BRANCH="${GROMACS}" ./ci_scripts/install_gromacs_branch.sh
    fi
  - pip install codecov

before_script:
  - export CCACHE_DIR=$HOME/.ccache_py
  - ccache -s
  - pip install --upgrade pip setuptools wheel
  - pip install --upgrade packaging scikit-build
  - pip install --no-cache-dir --upgrade --no-binary ":all:" --force-reinstall networkx mpi4py MarkupSafe
  - pip install pytest pytest-cov numpy networkx sphinx sphinx_rtd_theme

script:
  - |
    if [ "${GROMACS}" == release-2019 ] ; then
      source $HOME/install/gromacs-${GROMACS}/bin/GMXRC && ./ci_scripts/pygmx_0_0_7.sh
    else
      source $HOME/install/gromacs-${GROMACS}/bin/GMXRC && $PYTHON -m pip install ${GMXAPI}
    fi
  - ./ci_scripts/brer_restraint.sh
  - ./ci_scripts/run_brer.sh

notifications:
  email: false

after_success:
  - pushd $HOME/run_brer
  - bash <(curl -s https://codecov.io/bash)
  - popd
